import React, { Component } from 'react';
import { StyleSheet, View, Dimensions, Image, Text, Animated, Easing, TouchableOpacity } from 'react-native';
import Interactable from 'react-native-interactable';
import { connect } from 'react-redux';
import ImageLoad from 'react-native-image-placeholder';
import DateTimePicker from 'react-native-modal-datetime-picker';
import moment from 'moment';
import {  getCard,from_where,
  all_route,
  onPayment,
  charge_method,
        } from '../../actions/Map';
import {
	Container,
	Header,
	Title,
	Content,
	Button,
	
	List,
	ListItem,
	Left,
	Right,
	Body,
	icon,
  Separator,
  CheckBox,
} from 'native-base';
import Icon from 'react-native-vector-icons/FontAwesome';
import Icon2 from 'react-native-vector-icons/Entypo';

import * as Animatable from 'react-native-animatable'
const Screen = Dimensions.get('window');
import { ProgressDialog } from 'react-native-simple-dialogs';
import SnackBar from 'react-native-snackbar-component';

var { width, height } = Dimensions.get('window');
const ASPECT_RATIO = width / height;


class RouteSingle extends Component {
  constructor(props) {
    super(props);
    this._deltaY = new Animated.Value(0);
    this.state = {
      bounceValue: new Animated.Value(100),
      expanded: false,
      state: 'Money',
      state_norm: "normal",
      charge_type: this.props.charge_type,
      route: null,
      amount: 0,
      selected_amount: 'one_way',
      subscribe: false,
      isDateTimePickerVisible: false,
      from: 'route',
      //startDay: this.formatDate(new Date()) hh:mm:ss
      startDay: moment(new Date()).format("YYYY-MM-DD")

    }
  }

  formatDate(date) {
    var monthNames = [
      "January", "February", "March",
      "April", "May", "June", "July",
      "August", "September", "October",
      "November", "December"
    ];
  
    var day = date.getDate();
    var monthIndex = date.getMonth();
    var year = date.getFullYear();
  
    return day + '/' + monthNames[monthIndex] + '/' + year;
  }


  _showDateTimePicker = () => this.setState({ isDateTimePickerVisible: true });

  _hideDateTimePicker = () => this.setState({ isDateTimePickerVisible: false });

  _handleDatePicked = (date) => {
    this.setState({startDay: moment(date).format("YYYY-MM-DD")});
    this._hideDateTimePicker();
  };

  async componentWillMount() {
    this.animatedValue1 = new Animated.Value(0);
    this.animatedValue2 = new Animated.Value(1);


    var chose = this.props.navigation.state.params.route_id;
    var from = this.props.navigation.state.params.from;

    var a = this.props.routes;
  
    var aFiltered = a.filter(function(elem, index){
      return elem.route_id == chose;
    });
    thissingle = aFiltered;
    this.setState({amount: thissingle[0].amount_single});
    this.setState({from: from});
    //console.log(thissingle[0].image);
    //console.log("Now state "+ JSON.stringify(this.state));
  

  }

  getTheFuckOOO() {
    var froom = this.state.from;
    console.log('from '+froom);
    if (froom === "map") {
        this.props.navigation.navigate('Map');
        
    }  else {
        this.props.navigation.navigate('Route');
  
    }
}

  componentDidMount() {
    //console.log("PROPS" + JSON.stringify(this.props.navigation.state));

    //console.log("ROUTEID " + this.props.navigation.state.params.route_id);
  }

  onSelect(type){
    this.props.charge_method(type);
    this.callAnimate('Money');
  }

  onToggleSHit() {
    if (this.state.subscribe) {
      this.setState({subscribe: false});
    } else {
      this.setState({subscribe: true});
    }
  }


  callAnimate(t) {
    this.setState({type: t });
    if (!this.state.expanded) {
      this.setState({expanded: true});

      Animated.parallel([
        Animated.timing(this.animatedValue1, {
          toValue: -150,
          duration: 250,
          easing: Easing.inOut(Easing.ease),
        }),
        Animated.timing(this.animatedValue2, {
          toValue: -190,
          duration: 250,
          easing: Easing.inOut(Easing.ease),
        }),
      ]).start();
    } else {
      this.setState({expanded: false});
      Animated.parallel([
        Animated.timing(this.animatedValue1, {
          toValue: 0,
          duration: 250,
          easing: Easing.inOut(Easing.ease),
        }),
        Animated.timing(this.animatedValue2, {
          toValue: 0,
          duration: 250,
          easing: Easing.inOut(Easing.ease),
        }),
      ]).start();
    }

  }

  stops(tmp_array) {
    return tmp_array.map(function(news, i){
      return(
        <View key={i} style = {{
          flexDirection: 'row',
          marginTop: 15,
        }}>
        <View style = {{ width: 15, height: 15, borderColor: '#F05959', borderWidth: 2, borderRadius: 15}}/>
        {(tmp_array.length !== i + 1) &&<View style = {{
          position: 'absolute',
          height: 14,
          // borderStyle: 'dashed',
          // borderWidth: 1,
          width: 2,
          backgroundColor: '#777',
          left: 6.5,
          top: 20,
        }}/>
      }
        <Text style = {styles.listText}>{news.stop}</Text>
        </View>
       );
    });
  }

genIncon(type) {
  if (type == "CASH") {
    return(
      <Icon style = {{color: '#22A7F0', paddingRight: 10, fontSize: 20}}
                name = "money" />
    ); 
  } else if (type == "CARD") {
    return (
      <Icon2 style = {{color: '#22A7F0', paddingRight: 10, fontSize: 20}}
                name = "credit-card" /> 
    );
  } else {
    return (
<Icon2 style = {{color: '#22A7F0', paddingRight: 10, fontSize: 20}}
                name = "wallet" /> 
    );
  }
}
                

  getAmount(name) {
    if (name == "one_way") {
      amount = thissingle[0].amount_single;
    } else if (name == "day") {
      amount = thissingle[0].amount_day;
    } else if (name == "week") {
      amount = thissingle[0].amount_week;
    } else if (name == "month") {
      amount = thissingle[0].amount_month;
    }

    this.setState({amount: amount});
    this.setState({selected_amount: name});
    return amount;
  }

  getTheFuckOut() {
    this.props.onPayment(true);
    this.props.navigation.navigate('CardView', { id: thissingle[0].route_id, from: 'route' });
  }


  render() {

    const animatedStyle2 = {
      transform: [
        { translateY: this.animatedValue2 },
      ],
      //opacity: this.props.hoveron ? 0 : 1,
    }


    return (
      <View style={{
        flex: 1,
        alignItems: 'stretch',
        backgroundColor: 'white',
       // opacity:  ? 0.7 : 1,
      }}>
     
      {this.state.expanded &&
      <View style = {{
        backgroundColor: 'rgba(0,0,0,0.5)',
        position: 'absolute',
        top: 0,
        right: 0,
        left: 0,
        bottom: 0,
        zIndex: 999
      }}><TouchableOpacity style = {{flex: 1}} onPress = {() => this.callAnimate('Money')}/>
      </View>
    }

        <Animated.View style={[styles.filterContainer, {
          transform: [{
            translateY: this._deltaY.interpolate({
              inputRange: [-130, -50],
              outputRange: [-33, 0],
              extrapolateRight: 'clamp'
            })
          }]
        }]}>
          <Animated.View style={[styles.filterTop, {
            opacity: this._deltaY.interpolate({
              inputRange: [-90, -20],
              outputRange: [0, 1],
              extrapolateLeft: 'clamp',
              extrapolateRight: 'clamp'
            })
          }]}>
            <TouchableOpacity
            style = {{
              position: 'absolute',
              top: 10,
              left: 10,
            }}
             onPress={() => this.getTheFuckOOO()}>
              <Icon style = {{color : "#FFF"}} name="arrow-left" />
            </TouchableOpacity>
          </Animated.View>
          <TouchableOpacity onPress={() => console.log('Anywhere pressed')}>
            <View style={styles.filterField}>
              <Text style={styles.filterFieldText}><View style = {styles.green}/>   {thissingle[0].pickup}</Text>
            </View>
          </TouchableOpacity>
          <TouchableOpacity onPress={() => console.log('Anytime pressed')}>
            <Animated.View style={[styles.filterField, {
              opacity: this._deltaY.interpolate({
                inputRange: [-70, -50],
                outputRange: [0, 1],
                extrapolateLeft: 'clamp',
                extrapolateRight: 'clamp'
              })
            }]}>
              <Text style={styles.filterFieldText}><View style = {styles.yellow}/>   {thissingle[0].dropoff}</Text>
            </Animated.View>
          </TouchableOpacity>
            <Animated.View style={[styles.filterField2, {
              opacity: this._deltaY.interpolate({
                inputRange: [-20, 0],
                outputRange: [0, 1],
                extrapolateLeft: 'clamp',
                extrapolateRight: 'clamp'
              })
            }]}>
              <TouchableOpacity onPress = {() => this.getAmount('one_way')}
               style = {this.state.selected_amount == 'one_way' ? styles.hrefActive : styles.href}>
                  <Text style={this.state.selected_amount == 'one_way' ? styles.hrefActiveText : styles.hrefText}>One-Way</Text>
              </TouchableOpacity>
              <TouchableOpacity onPress = {() => this.getAmount('day')}
               style = {this.state.selected_amount == 'day' ? styles.hrefActive : styles.href}>
                  <Text style={this.state.selected_amount == 'day' ? styles.hrefActiveText : styles.hrefText}>Full Day</Text>
              </TouchableOpacity>
              <TouchableOpacity onPress = {() => this.getAmount('week')}
               style = {this.state.selected_amount == 'week' ? styles.hrefActive : styles.href}>
                  <Text style={this.state.selected_amount == 'week' ? styles.hrefActiveText : styles.hrefText}>Full Week</Text>
              </TouchableOpacity>
              <TouchableOpacity onPress = {() => this.getAmount('month')}
               style = {this.state.selected_amount == 'month' ? styles.hrefActive : styles.href}>
                  <Text style={this.state.selected_amount == 'month' ? styles.hrefActiveText : styles.hrefText}>Full Month</Text>
              </TouchableOpacity>

             </Animated.View>
        </Animated.View>

        <Interactable.View
          verticalOnly={true}
          snapPoints={[{y: 0}, {y: -130}]}
          boundaries={{top: -200}}
          animatedValueY={this._deltaY}>
          <View style={styles.content}>
            <Text style={styles.panelTitle}>{thissingle[0].route} ₦{this.state.amount}</Text>
            <Text style={styles.panelSubtitle}>{thissingle[0].morning} Morning - {thissingle[0].evening} Evening ({thissingle[0].stops.length} {thissingle[0].stops.length > 1 ? 'Stops' : 'Stop'})</Text>
            <TouchableOpacity  style = {{marginTop: -15,}} onPress = {() => this.setState({isDateTimePickerVisible: true})}><Text style={{color: '#4CAF50',fontSize: 14,
            height: 20,
            marginBottom: 10
            }}>Start Date - {this.state.startDay} </Text></TouchableOpacity>
            <ImageLoad
              style={styles.photo}
              loadingStyle={{ size: 'large', color: 'gray' }}
              source={{ uri: thissingle[0].image }}
          />
             
            {this.stops(thissingle[0].stops)}

            <View style = {{
                zIndex: 10,
                width: '100%',
                height: '10%',
                //flex: 4,
                backgroundColor: '#FFF',
                marginTop: 20,
                borderColor: '#CCC',
                marginBottom: 20,
                borderTopWidth: 1,
                borderBottomWidth: 1,
               // justifyContent: 'center',
                flexDirection: 'row',
                alignItems: 'center',
            }}>

              <View style = {{
                  alignContent: 'center
                  justifyContent: 'center',
                  alignItems: 'center',
                  width: '50%',
                  alignSelf: 'center',
                  padding: 5,
              }}>
                <TouchableOpacity
                onPress = {() => this.callAnimate('Money')}
                style = {{
                  flexDirection: 'row',

                }}>
                {this.genIncon(this.props.charge_type)}
                  <View style = {{
                  justifyContent: 'space-between',
                  flexDirection: 'row'}}>
                    <Text style = {{
                    color: '#43496A', fontSize: 17, fontFamily: "Montserrat",
                  }}>
                    {this.props.charge_type} 
                  </Text>

                  <Text style = {{
                    color: '#43496A', fontSize: 17,
                    marginHorizontal: 30,
                    fontFamily: "Montserrat",
                  }}>
                    
                  </Text>
                  </View>
                </TouchableOpacity>
                </View>
           

            </View>



              {/* {(this.state.selected_amount == 'week' || this.state.selected_amount == 'month') && 
              <ListItem>
              <CheckBox checked={this.state.subscribe} onPress = {() => this.onToggleSHit()} />
              <Body>
                <Text style = {{fontFamily: "Montserrat"}}>Subscribe</Text>
              </Body>
            </ListItem>
              } */}


            
            <TouchableOpacity onPress = {() => this.props.navigation.navigate('Confirm', { route_id: thissingle[0].route_id, from: 'all', selected_cost: this.state.amount, startDay: this.state.startDay, charge_type: this.state.charge_type, selected_type: this.state.selected_amount })} style={styles.panelButton}>
              <Text style={styles.panelButtonTitle}>Purchase Ticket(₦{this.state.amount})</Text>
            </TouchableOpacity>

            
          </View>
        </Interactable.View>




          {!this.props.card_exist && (this.props.charge_type === 'CARD') && this.getTheFuckOut()}


          <Animated.View
          animation="slideInUp"
          style={[styles.okayokayyy, animatedStyle2, {
            //opacity: this.state.expanded ? 1 : 0
          }]}>
          {this.state.type === 'Money' &&

          <View style = {{
          width: '100%',
          height: '100%',
          justifyContent: 'center',
          paddingRight: 20,
          paddingLeft: 20,

          }}>
          <ListItem
          onPress = {() => this.onSelect('CASH')}
          >
          <Icon style = {{color: '#27D9A1', paddingRight: 10, fontSize: 30}}
                name = "money" />
                  <Text style = {{
                    color: '#43496A', fontSize: 25,fontFamily: "Montserrat",
                  }}> Cash
          </Text>
          <Right>
          {this.props.charge_type == 'CASH' && <Image source = {check}/>}
          </Right>

          </ListItem>
          <ListItem
          onPress = {() => this.onSelect('CARD')}
          
          >
          <Icon2 style = {{color: '#27D9A1', paddingRight: 10, fontSize: 30}}
                  name = "credit-card" />
                    <Text style = {{
                      color: '#43496A', fontSize: 25,fontFamily: "Montserrat",
                    }}> Card
            </Text>
          <Right>
          {this.props.charge_type == 'CARD' && <Image source = {check}/>}
          </Right>

          </ListItem>
          <ListItem
          onPress = {() => this.onSelect('WALLET')}
          style = {{
            borderBottomWidth: 0
          }}
          >
          <Icon2 style = {{color: '#27D9A1', paddingRight: 10, fontSize: 30}}
                  name = "wallet" />
                    <Text style = {{
                      color: '#43496A', fontSize: 25,fontFamily: "Montserrat",
                    }}> Wallet
            </Text>
          <Right>
          {this.props.charge_type == 'WALLET' && <Image source = {check}/>}
          </Right>

          </ListItem>
          </View>
          //   :
          //   <View style = {{
          // width: '100%',
          // height: '100%',
          // justifyContent: 'center',
          // paddingRight: 20,
          // paddingLeft: 20,

          // }}>
          // <ListItem
          // onPress = {() => this.onSelect('normal')}
          // >
          // <Icon style = {{color: '#27D9A1', paddingRight: 10, fontSize: 20}}
          //       name = "user" />
          //         <Text style = {{
          //           color: '#43496A', fontSize: 15
          //         }}> Normal
          // </Text>
          // <Right>
          // {this.state.state_norm == 'normal' && <Image source = {check}/>}
          // </Right>

          // </ListItem>
          // <ListItem
          // onPress = {() => this.onSelect('emergency')}
          // >
          // <Icon style = {{color: '#009AD5', paddingRight: 10, fontSize: 20}}
          //         name = "clock" />
          //           <Text style = {{
          //             color: '#43496A', fontSize: 15
          //           }}> Emergency
          //   </Text>
          // <Right>
          // {this.state.state_norm == 'emergency' && <Image source = {check}/>}
          // </Right>

          // </ListItem>
          // </View>
          }
          </Animated.View>


          <DateTimePicker
          isVisible={this.state.isDateTimePickerVisible}
          onConfirm={this._handleDatePicked}
          onCancel={this._hideDateTimePicker}
        />

      </View>
    );
  }
}

const check = require("../../../assets/success.png");


const styles = StyleSheet.create({
  container: {
   
    //backgroundColor: 'rgba(0,0,0,0.8)'
  },
  filterContainer: {
    //backgroundColor: '#278485',
    backgroundColor: '#22313F',
    paddingTop: 10
  },
  filterTop: {
    height: 36
  },
  filterUp: {
    marginLeft: 24,
    width: 26,
    height: 26
  },
  filterField: {
    height: 40,
    backgroundColor: '#FFF',
    //backgroundColor: '#3a969a',
    marginHorizontal: 10,
    marginBottom: 10,
    borderRadius: 4,
    justifyContent: 'center'
  },

  filterField2: {
    height: 40,
    //backgroundColor: '#3a969a',
    marginHorizontal: 10,
    marginBottom: 10,
    borderRadius: 4,
    justifyContent: 'space-between',
    flexDirection: 'row'
  },

  href: {
    backgroundColor: '#FFF',
    borderRadius: 4,
    paddingBottom: 5,
    paddingTop: 5,
    paddingLeft: 15,
    paddingRight: 15,
    alignContent: 'center',
    alignItems: 'center',
    justifyContent: 'center',
  },

  hrefText: {
    color: '#777',
    //color: '#3a969a',
    fontSize: 12,
    fontWeight: '500',
    fontFamily: "Montserrat",
  
  },

  hrefActive: {
    backgroundColor: '#22A7F0',
    borderRadius: 4,
    paddingBottom: 5,
    paddingTop: 5,
    paddingLeft: 15,
    paddingRight: 15,
    alignContent: 'center',
    alignItems: 'center',
    justifyContent: 'center',
  },

  hrefActiveText: {
    color: '#FFF',
    fontSize: 12,
    fontWeight: '500',
    fontFamily: "Montserrat",
  
  },

  filterFieldText: {
    color: '#777',
    //color: 'white',
    fontSize: 14,
    fontFamily: "Montserrat",
    fontWeight: '500',
    marginLeft: 30
  },
  content: {
    padding: 20,
    backgroundColor: 'white'
  },
  panelTitle: {
    fontSize: 27,
    height: 35,
    fontFamily: "Montserrat",
  },
  panelSubtitle: {
    fontSize: 14,
    color: 'gray',
    height: 30,
    marginBottom: 10
  },
  panelButton: {
    padding: 20,
    borderRadius: 10, 
    backgroundColor: '#87D37C',
    //backgroundColor: '#de6d77',
    alignItems: 'center',
    marginVertical: 10
  },
  panelButtonTitle: {
    fontSize: 17,
    fontWeight: 'bold',
    color: 'white',
    fontFamily: "Montserrat",
  },
  photo: {
    width: Screen.width-40,
    height: 190,
    marginBottom: 20
  },
  okayokayyy: {
    position: 'absolute',
    bottom: 0,
    backgroundColor: '#FFF',
    borderTopWidth:1,
    borderTopColor: '#777',
    borderTopRightRadius: 4,
    borderTopLeftRadius: 4,
    elevation: 2,
  
    zIndex: 1000,
    top: height,
    left: 0,
    right: 0,
    height: 190,
    //alignItems: 'center',
    justifyContent: 'space-between',
  },
  listText: {
    fontSize: 13,
    marginLeft: 20,
    color: '#212121',
    fontFamily: "Montserrat",
    marginBottom: 5,
  },
  listIcon: {
    width: 7,
    height: 7,
    backgroundColor: '#111',
  },

  green: {
    width: 7,
    height: 7,
    backgroundColor: '#de6d77',
    borderRadius: 7
  },

  yellow: {
    width: 7,
    height: 7,
    backgroundColor: 'yellow',
    borderRadius: 7
  },
  
});



const mapStateToProps = ({ map }) => {
	const { destination, hoveron,
	  pickup, vehicle,
	  latitude,
	  longitude,
	  latitudeDelta,
	  longitudeDelta,
	  estimated_price,
	  distanceInKM,
	  selected,
	  distanceInHR,
	  last_4,
	  card_exist, card_type,
	  prices,
	  history,
    done,
    routes,
    charge_type,
    history_single,
    getting_route,
    network_connected,
	  error, region, user, distance_info, loading,emergency, status } = map;
	return {
		last_4,
		card_exist,
	  destination,
	  pickup,
	  vehicle,
	  error,
	  distanceInKM,
    distanceInHR,
    network_connected,
	  hoveron,
	  distance_info,
	  loading,
	  region,
	  user,
	  status,
	  latitude,
	  longitude,
	  selected,
	  latitudeDelta,
	  longitudeDelta,
	  emergency,
	  prices,
	  done,
	  estimated_price,
	  history_single,
	  history,
    card_type,
    getting_route,
    routes,
    charge_type,
	};
  };

  export default connect(mapStateToProps, {
	getCard,from_where, all_route, charge_method, onPayment,
  })(RouteSingle);
  